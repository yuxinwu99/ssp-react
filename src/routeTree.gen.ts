/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SecretsRouteImport } from './routes/secrets'
import { Route as DeploymentsRouteImport } from './routes/deployments'
import { Route as ComplianceRouteImport } from './routes/compliance'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OrrIndexRouteImport } from './routes/orr/index'
import { Route as OrrFormRouteImport } from './routes/orr/form'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo.tanstack-query'
import { Route as DemoTableRouteImport } from './routes/demo.table'
import { Route as DemoFormSimpleRouteImport } from './routes/demo.form.simple'
import { Route as DemoFormAddressRouteImport } from './routes/demo.form.address'

const SecretsRoute = SecretsRouteImport.update({
  id: '/secrets',
  path: '/secrets',
  getParentRoute: () => rootRouteImport,
} as any)
const DeploymentsRoute = DeploymentsRouteImport.update({
  id: '/deployments',
  path: '/deployments',
  getParentRoute: () => rootRouteImport,
} as any)
const ComplianceRoute = ComplianceRouteImport.update({
  id: '/compliance',
  path: '/compliance',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrrIndexRoute = OrrIndexRouteImport.update({
  id: '/orr/',
  path: '/orr/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrrFormRoute = OrrFormRouteImport.update({
  id: '/orr/form',
  path: '/orr/form',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTableRoute = DemoTableRouteImport.update({
  id: '/demo/table',
  path: '/demo/table',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoFormSimpleRoute = DemoFormSimpleRouteImport.update({
  id: '/demo/form/simple',
  path: '/demo/form/simple',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoFormAddressRoute = DemoFormAddressRouteImport.update({
  id: '/demo/form/address',
  path: '/demo/form/address',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/compliance': typeof ComplianceRoute
  '/deployments': typeof DeploymentsRoute
  '/secrets': typeof SecretsRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/orr/form': typeof OrrFormRoute
  '/orr': typeof OrrIndexRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/compliance': typeof ComplianceRoute
  '/deployments': typeof DeploymentsRoute
  '/secrets': typeof SecretsRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/orr/form': typeof OrrFormRoute
  '/orr': typeof OrrIndexRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/compliance': typeof ComplianceRoute
  '/deployments': typeof DeploymentsRoute
  '/secrets': typeof SecretsRoute
  '/demo/table': typeof DemoTableRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/orr/form': typeof OrrFormRoute
  '/orr/': typeof OrrIndexRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/compliance'
    | '/deployments'
    | '/secrets'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/orr/form'
    | '/orr'
    | '/demo/form/address'
    | '/demo/form/simple'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/compliance'
    | '/deployments'
    | '/secrets'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/orr/form'
    | '/orr'
    | '/demo/form/address'
    | '/demo/form/simple'
  id:
    | '__root__'
    | '/'
    | '/compliance'
    | '/deployments'
    | '/secrets'
    | '/demo/table'
    | '/demo/tanstack-query'
    | '/orr/form'
    | '/orr/'
    | '/demo/form/address'
    | '/demo/form/simple'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ComplianceRoute: typeof ComplianceRoute
  DeploymentsRoute: typeof DeploymentsRoute
  SecretsRoute: typeof SecretsRoute
  DemoTableRoute: typeof DemoTableRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  OrrFormRoute: typeof OrrFormRoute
  OrrIndexRoute: typeof OrrIndexRoute
  DemoFormAddressRoute: typeof DemoFormAddressRoute
  DemoFormSimpleRoute: typeof DemoFormSimpleRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/secrets': {
      id: '/secrets'
      path: '/secrets'
      fullPath: '/secrets'
      preLoaderRoute: typeof SecretsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deployments': {
      id: '/deployments'
      path: '/deployments'
      fullPath: '/deployments'
      preLoaderRoute: typeof DeploymentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/compliance': {
      id: '/compliance'
      path: '/compliance'
      fullPath: '/compliance'
      preLoaderRoute: typeof ComplianceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orr/': {
      id: '/orr/'
      path: '/orr'
      fullPath: '/orr'
      preLoaderRoute: typeof OrrIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orr/form': {
      id: '/orr/form'
      path: '/orr/form'
      fullPath: '/orr/form'
      preLoaderRoute: typeof OrrFormRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/table': {
      id: '/demo/table'
      path: '/demo/table'
      fullPath: '/demo/table'
      preLoaderRoute: typeof DemoTableRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/form/simple': {
      id: '/demo/form/simple'
      path: '/demo/form/simple'
      fullPath: '/demo/form/simple'
      preLoaderRoute: typeof DemoFormSimpleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/form/address': {
      id: '/demo/form/address'
      path: '/demo/form/address'
      fullPath: '/demo/form/address'
      preLoaderRoute: typeof DemoFormAddressRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ComplianceRoute: ComplianceRoute,
  DeploymentsRoute: DeploymentsRoute,
  SecretsRoute: SecretsRoute,
  DemoTableRoute: DemoTableRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  OrrFormRoute: OrrFormRoute,
  OrrIndexRoute: OrrIndexRoute,
  DemoFormAddressRoute: DemoFormAddressRoute,
  DemoFormSimpleRoute: DemoFormSimpleRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
